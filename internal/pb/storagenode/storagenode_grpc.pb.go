// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package storagenode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageNodeClient is the client API for StorageNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageNodeClient interface {
	PutChunk(ctx context.Context, in *PutChunkRequest, opts ...grpc.CallOption) (*PutChunkResponse, error)
	GetChunk(ctx context.Context, in *GetChunkRequest, opts ...grpc.CallOption) (*GetChunkResponse, error)
	DeleteChunk(ctx context.Context, in *DeleteChunkRequest, opts ...grpc.CallOption) (*DeleteChunkResponse, error)
	GetNodeID(ctx context.Context, in *GetNodeIDRequest, opts ...grpc.CallOption) (*GetNodeIDResponse, error)
}

type storageNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageNodeClient(cc grpc.ClientConnInterface) StorageNodeClient {
	return &storageNodeClient{cc}
}

func (c *storageNodeClient) PutChunk(ctx context.Context, in *PutChunkRequest, opts ...grpc.CallOption) (*PutChunkResponse, error) {
	out := new(PutChunkResponse)
	err := c.cc.Invoke(ctx, "/storagenode.StorageNode/PutChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageNodeClient) GetChunk(ctx context.Context, in *GetChunkRequest, opts ...grpc.CallOption) (*GetChunkResponse, error) {
	out := new(GetChunkResponse)
	err := c.cc.Invoke(ctx, "/storagenode.StorageNode/GetChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageNodeClient) DeleteChunk(ctx context.Context, in *DeleteChunkRequest, opts ...grpc.CallOption) (*DeleteChunkResponse, error) {
	out := new(DeleteChunkResponse)
	err := c.cc.Invoke(ctx, "/storagenode.StorageNode/DeleteChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageNodeClient) GetNodeID(ctx context.Context, in *GetNodeIDRequest, opts ...grpc.CallOption) (*GetNodeIDResponse, error) {
	out := new(GetNodeIDResponse)
	err := c.cc.Invoke(ctx, "/storagenode.StorageNode/GetNodeID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageNodeServer is the server API for StorageNode service.
// All implementations must embed UnimplementedStorageNodeServer
// for forward compatibility
type StorageNodeServer interface {
	PutChunk(context.Context, *PutChunkRequest) (*PutChunkResponse, error)
	GetChunk(context.Context, *GetChunkRequest) (*GetChunkResponse, error)
	DeleteChunk(context.Context, *DeleteChunkRequest) (*DeleteChunkResponse, error)
	GetNodeID(context.Context, *GetNodeIDRequest) (*GetNodeIDResponse, error)
	mustEmbedUnimplementedStorageNodeServer()
}

// UnimplementedStorageNodeServer must be embedded to have forward compatible implementations.
type UnimplementedStorageNodeServer struct {
}

func (UnimplementedStorageNodeServer) PutChunk(context.Context, *PutChunkRequest) (*PutChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutChunk not implemented")
}
func (UnimplementedStorageNodeServer) GetChunk(context.Context, *GetChunkRequest) (*GetChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunk not implemented")
}
func (UnimplementedStorageNodeServer) DeleteChunk(context.Context, *DeleteChunkRequest) (*DeleteChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChunk not implemented")
}
func (UnimplementedStorageNodeServer) GetNodeID(context.Context, *GetNodeIDRequest) (*GetNodeIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeID not implemented")
}
func (UnimplementedStorageNodeServer) mustEmbedUnimplementedStorageNodeServer() {}

// UnsafeStorageNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageNodeServer will
// result in compilation errors.
type UnsafeStorageNodeServer interface {
	mustEmbedUnimplementedStorageNodeServer()
}

func RegisterStorageNodeServer(s grpc.ServiceRegistrar, srv StorageNodeServer) {
	s.RegisterService(&StorageNode_ServiceDesc, srv)
}

func _StorageNode_PutChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageNodeServer).PutChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storagenode.StorageNode/PutChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageNodeServer).PutChunk(ctx, req.(*PutChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageNode_GetChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageNodeServer).GetChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storagenode.StorageNode/GetChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageNodeServer).GetChunk(ctx, req.(*GetChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageNode_DeleteChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageNodeServer).DeleteChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storagenode.StorageNode/DeleteChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageNodeServer).DeleteChunk(ctx, req.(*DeleteChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageNode_GetNodeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageNodeServer).GetNodeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storagenode.StorageNode/GetNodeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageNodeServer).GetNodeID(ctx, req.(*GetNodeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageNode_ServiceDesc is the grpc.ServiceDesc for StorageNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storagenode.StorageNode",
	HandlerType: (*StorageNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutChunk",
			Handler:    _StorageNode_PutChunk_Handler,
		},
		{
			MethodName: "GetChunk",
			Handler:    _StorageNode_GetChunk_Handler,
		},
		{
			MethodName: "DeleteChunk",
			Handler:    _StorageNode_DeleteChunk_Handler,
		},
		{
			MethodName: "GetNodeID",
			Handler:    _StorageNode_GetNodeID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/storagenode.proto",
}
